{"version":3,"sources":["components/GiphySearch/GiphySearch.js","components/Footer/Footer.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["Search","state","search","searchResults","handleChangeFor","propertyName","event","_this","setState","Object","defineProperty","target","value","gifSearch","preventDefault","console","log","axios","method","url","data","then","response","catch","error","alert","react_default","a","createElement","onSubmit","this","label","onChange","variant","Button_default","color","type","href","lib_default","id","map","gif","className","Card_default","CardMedia_default","component","height","max-width","src","images","fixed_width","alt","description","title","Component","Footer","theme","createMuiTheme","palette","primary","main","secondary","App","getRndIntergert","min","max","Math","floor","random","getTrending","get","length","classes","props","core_styles","width","align","background","Paper_default","root","elevation","onClick","GiphySearch","components_Footer_Footer","withStyles","objectSpread","mixins","gutters","marginTop","spacing","unit","marginBottom","marginRight","marginLeft","paddingTop","paddingBottom","backgroundColor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","components_App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5a761dfe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport ScrollableAnchor from 'react-scrollable-anchor'\n\n\n\n\nclass Search extends Component {\n    // local state \n    state = {\n        search: '',\n        searchResults: []\n    }\n\n    // sets the user input in state\n    handleChangeFor = (propertyName) => {\n     return (event) => {\n       this.setState({\n                [propertyName]: event.target.value\n       });\n     }\n    }\n\n    // POST request to send search for giphy from the server\n    gifSearch = (event) => {\n          event.preventDefault();\n          console.log('search', this.state.search)\n          axios({\n              method: 'POST',\n              url: '/search',\n              data: {search: this.state.search}\n          }).then(response => {\n              console.log('search results', response.data);\n              this.setState({\n                  searchResults: response.data\n              })\n              this.setState({\n                  search: ''\n              })\n          }).catch(error => {\n              alert('Error', error);\n              console.log('error',error)\n          })\n      }\n\n\n  render() {\n    return (\n      <div>\n          {/* <pre>{JSON.stringify(this.state.search)}</pre>\n          <pre>{JSON.stringify(this.state.searchResults)}</pre> */}\n        <form onSubmit={this.gifSearch}>\n            <input\n            label=\"Search\"\n            onChange={this.handleChangeFor('search')} \n            value={this.state.search} \n            variant=\"outlined\"\n            />\n            <br/>\n            <br/>\n           <Button variant=\"contained\" color=\"primary\" type=\"submit\">Search</Button>\n            <br/>\n            <br/>\n            <a href='#section1'> Scroll Down For Results </a>\n        </form>\n         <ScrollableAnchor id={'section1'}>\n          <div>\n            {this.state.searchResults.map ( gif => (\n                 <div className=\"App\">\n                    <Card id =\"card\">\n                    <CardMedia\n                    component=\"img\"\n                    height=\"300\" \n                    max-width=\"300\" \n                    src={gif.images.fixed_width.url} \n                    alt={gif.description} \n                    title= {gif.description}\n                    />\n                    </Card>\n                    </div>\n            ))}\n        </div>\n         </ScrollableAnchor>\n      </div>\n    );\n  }\n  \n}\n\n\n\nexport default Search;\n","import React from 'react';\nimport './Footer.css'\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n    Powered By GIPHY\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport GiphySearch from '../GiphySearch/GiphySearch';\nimport Footer from '../Footer/Footer'\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    marginTop: theme.spacing.unit * 1,\n    marginBottom: theme.spacing.unit * 1,\n    marginRight: theme.spacing.unit * 0,\n    marginLeft: theme.spacing.unit * 0,\n\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    backgroundColor: '#8b0000'\n  },\n  background: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 3,\n    paddingBottom: theme.spacing.unit * 5,\n    backgroundColor: '#222'\n  }\n});\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#000000', \n    },\n    secondary: {\n      main: '#1a3d50',\n    },\n  },\n});\n\nclass App extends Component {\n  // set state\n  state = {\n    images: ''\n  };\n\n  // get giphy upon page load\n  componentDidMount() {\n    this.getTrending();\n  }\n\n  // randomly show a gif\n  getRndIntergert = (min,max)=> {\n    return Math.floor (Math.random() * (max-min))+ min;\n  }\n\n  // GET request for giphy from the server\n  getTrending = () => {\n    axios.get('/trending')\n      .then((response) => {\n        console.log('trending results', response.data);\n        this.setState(\n          {\n            images: response.data[this.getRndIntergert(1, response.data.length)].images.fixed_width.url\n          })\n        ;\n      })\n      .catch((error) => {\n        alert('error in making get request', error);\n      })\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n        <MuiThemeProvider theme={theme}>\n           <header className=\"App-header\">\n            <div id=\"logo\">\n            <a href=\"https://giphy.com/\" target=\"_blank\">\n              <img height=\"auto\" width=\"90px\" src=\"https://pmcvariety.files.wordpress.com/2016/10/giphy-logo-e1477932075273.png?w=867&h=490&crop=1\" alt=\"Giphy logo\"  />\n            </a>\n            </div>\n            <h1 className=\"App-title\">Random Trending Giphy</h1>\n            </header>\n            <div align=\"center\" className={classes.background}>\n            <div id=\"paperDiv\" className=\"App\">\n            <Paper className={classes.root} elevation={5}>\n            <div>\n            <img height=\"250\" width=\"250\" alt=\"gif\" src={this.state.images}/> \n            </div>\n            <br/>\n            <div>\n           <Button variant=\"contained\" color=\"primary\" onClick={this.getTrending}>Change Giphy</Button>\n            </div>\n            <br/>\n            </Paper>\n            </div>\n            <div className=\"App\">\n            <h1>Or</h1>\n            <GiphySearch/>\n          </div>\n          <Footer/>\n      </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}