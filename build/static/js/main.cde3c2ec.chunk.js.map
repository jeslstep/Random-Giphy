{"version":3,"sources":["components/GiphyFavorites/GiphyFavorites.js","components/GiphySearch/GiphySearch.js","components/Footer/Footer.js","components/LandingPage/LandingPage.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["GiphyFavorites","state","dbResults","getfavorites","axios","get","then","response","console","log","data","_this","setState","catch","error","alert","deleteGiphy","giphyId","method","url","concat","this","_this2","react_default","a","createElement","HashRouter","Link","to","map","gif","key","_id","height","max-width","className","Card_default","id","CardMedia_default","component","src","giphy_url","alt","title","Button_default","variant","color","onClick","Component","Search","search","searchResults","handleChangeFor","propertyName","event","Object","defineProperty","target","value","gifSearch","preventDefault","addGiphy","onSubmit","index_es","label","onChange","type","images","fixed_width","description","align","Footer","LandingPage","getRndIntergert","min","max","Math","floor","random","getTrending","length","href","width","elevation","GiphySearch","components_Footer_Footer","theme","createMuiTheme","palette","primary","main","secondary","App","styles","Route","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","components_App_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cde3c2ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport {HashRouter as Router, Link} from 'react-router-dom';\n\n\nclass GiphyFavorites extends Component {\n\n\n// get giphy upon page load\ncomponentDidMount() {\n    this.getfavorites();\n}\n\n\n    // local state \n    state = {\n       dbResults: [],\n    }\n\n// GET request for giphy from the server\n  getfavorites = () => {\n    axios.get('/favorites')\n      .then((response) => {\n        console.log('favorite results', response.data);\n         this.setState({\n             dbResults: response.data\n         });\n      })\n      .catch((error) => {\n        alert('error in making get request', error);\n      })\n  }\n\n    // delete an giphy\n  deleteGiphy = (giphyId) => {\n       axios({\n         method: 'DELETE',\n         url: `favorites/${giphyId}`\n       }).then(() => {\n         alert(\"Deleted!\");\n         this.getfavorites();\n       }).catch(error => {\n         alert(\"Unable to Delete\", \"Not deleted\", \"warning\", error);\n       });\n     }\n\n\n  render() {\n    return (\n      <div>\n            <center>\n            <Router>\n                <nav>\n                    <h1><Link to=\"/\">Home</Link></h1>\n                </nav>\n            </Router>\n            </center>\n           <pre>FAVORITES</pre>\n          <div>\n            {this.state.dbResults.map ( gif => (\n                 <div key={gif._id} height=\"auto\" max-width=\"250\" className=\"App\">\n                    <Card id =\"card\">\n                    <CardMedia\n                        component=\"img\"\n                        height=\"auto\" \n                        max-width=\"250\"  \n                        src={gif.giphy_url} \n                        alt=\"a gif that has been choosen as a favorite\" \n                        title=\"a gif that has been choosen as a favorite\" \n                    />\n                    <Button\n                        variant=\"contained\" \n                        color=\"primary\" \n                        onClick={() => this.deleteGiphy(gif._id)}\n                        >\n                        Delete\n                    </Button>\n                    </Card>\n                    </div>\n            ))}\n        </div>\n     \n      </div>\n    );\n  }\n  \n}\n\n\n\nexport default GiphyFavorites;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { TextField } from '@material-ui/core';\nimport {HashRouter as Router, Link} from 'react-router-dom';\n\n\nclass Search extends Component {\n    // local state \n    state = {\n        search: '',\n        searchResults: [],\n    }\n\n    // sets the user input in state\n    handleChangeFor = (propertyName) => {\n     return (event) => {\n       this.setState({\n                [propertyName]: event.target.value\n       });\n     }\n    }\n\n    // POST request to send search for giphy to the server\n    gifSearch = (event) => {\n          event.preventDefault();\n          console.log('search', this.state.search)\n          axios({\n              method: 'POST',\n              url: '/search',\n              data: {search: this.state.search}\n          }).then(response => {\n              console.log('search results', response.data);\n              this.setState({\n                  searchResults: response.data\n              })\n              this.setState({\n                  search: ''\n              })\n          }).catch(error => {\n              alert('Error', error);\n              console.log('error',error)\n          })\n      }\n\n    // POST request to send search for giphy url to the server\n    addGiphy = (giphy_url) => {\n        axios({\n            method: 'POST',\n            url: '/favorites',\n            data: {\n                giphy_url: giphy_url\n            }\n        }).then(response => {\n            alert('Added to Favorites')\n        }).catch(error => {\n            alert('Error', error);\n            console.log('error', error)\n        })     \n    }\n\n  render() {\n    return (\n      <div>\n          <h1 className=\"App-title\">Search and Add Favorites</h1>         \n          <center>\n            <Router>\n                <nav>\n                    <h6><Link to=\"/giphyfavorites\">Veiw Favorites</Link></h6>\n                </nav>\n            </Router>\n            </center>\n          <br/>\n        <form onSubmit={this.gifSearch}>\n            <TextField\n            label=\"Search\"\n            onChange={this.handleChangeFor('search')} \n            value={this.state.search} \n          \n            />\n            <br/>\n            <br/>\n           <Button variant=\"contained\" color=\"primary\" type=\"submit\">Search</Button>\n        </form>\n   \n          <div>\n            {this.state.searchResults.map ( gif => (\n                 <div height=\"auto\" max-width=\"250\" className=\"App\">\n                    <Card id =\"card\">\n                    <CardMedia\n                    component=\"img\"\n                    height=\"auto\" \n                    max-width=\"250\"  \n                    src={gif.images.fixed_width.url} \n                    alt={gif.description} \n                    title= {gif.description}\n                    />\n                 <div className=\"backgroundColor\" align=\"center\">\n                        <section className=\"padding\">\n                        <Button \n                            className=\"a\"\n                            variant=\"contained\" \n                            color=\"primary\" \n                            type=\"submit\" \n                            onClick = { () => this.addGiphy(gif.images.fixed_width.url) }>\n                        Add to Favorites\n                        </Button>\n                        </section>\n                        </div>\n                    </Card>\n\n     \n                </div>\n\n        \n            ))}\n        </div>\n      </div>\n    );\n  }\n  \n}\n\n\n\nexport default Search;\n","import React from 'react';\nimport './Footer.css'\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n    Powered By GIPHY\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport GiphySearch from '../GiphySearch/GiphySearch';\nimport Footer from '../Footer/Footer';\nimport { Card } from '@material-ui/core';\n\n\n\nclass LandingPage extends Component {\n  // set state\n  state = {\n    images: ''\n  };\n\n  // get giphy upon page load\n  componentDidMount() {\n    this.getTrending();\n  }\n\n  // randomly show a gif\n  getRndIntergert = (min,max)=> {\n    return Math.floor (Math.random() * (max-min))+ min;\n  }\n\n  // GET request for giphy from the server\n  getTrending = () => {\n    axios.get('/trending')\n      .then((response) => {\n        console.log('trending results', response.data);\n        this.setState(\n          {\n            images: response.data[this.getRndIntergert(1, response.data.length)].images.fixed_width.url\n          })\n        ;\n      })\n      .catch((error) => {\n        alert('error in making get request', error);\n      })\n  }\n\nrender() {\n   \n    return (\n        <div>\n           <header className=\"App-header\">\n           {/* giphy logo */}\n            <div id=\"logo\">\n                {/* eslint-disable-next-line  */}\n                <a href=\"https://giphy.com/\" target=\"_blank\">\n                  <img height=\"auto\" width=\"90\" src=\"https://pmcvariety.files.wordpress.com/2016/10/giphy-logo-e1477932075273.png?w=867&h=490&crop=1\" alt=\"Giphy logo\"  />\n                </a>\n            </div>\n            <h1 className=\"App-title\">Random Trending Giphy</h1>\n            </header>\n            <div align=\"center\" >\n              <div >\n              <Card id=\"card\" elevation={5}>\n              <div>\n              <img height=\"auto\" max-width=\"250\" alt=\"gif\" src={this.state.images}/> \n              </div>\n              <br/>\n              <div>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.getTrending}>Change Giphy</Button>\n            </div>\n            <br/>\n            </Card>\n            </div>\n            <h1>Or</h1>\n            <GiphySearch/>\n          {/* must be display to credit giphy */}\n          <Footer/>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default LandingPage;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport GiphyFavorites from '../GiphyFavorites/GiphyFavorites';\nimport LandingPage from '../LandingPage/LandingPage';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#000000', \n    },\n    secondary: {\n      main: '#ffffff',\n    },\n  },\n});\n\nclass App extends Component {\n\nrender() {\n   \n    return (\n        <MuiThemeProvider theme={theme}>\n          <Router>\n              <div>\n                  <Route exact path=\"/\" component={LandingPage}/>\n                  <Route path=\"/giphyfavorites\" component={GiphyFavorites}/>\n              </div>\n          </Router>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}